/**
 * jans-config-api
 * jans-config-api - Authorization services
 *
 * The version of the OpenAPI document: 1.0
 * Contact: xxx@gluu.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GluuAttribute from '../model/GluuAttribute';
import GluuAttributeAttributeValidation from '../model/GluuAttributeAttributeValidation';
import PatchRequest from '../model/PatchRequest';

/**
* Attribute service.
* @module api/AttributeApi
* @version 1.0
*/
export default class AttributeApi {

    /**
    * Constructs a new AttributeApi. 
    * @alias module:api/AttributeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteAttributesByInum operation.
     * @callback module:api/AttributeApi~deleteAttributesByInumCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an attribute based on inum.
     * Deletes an attribute based on inum.
     * @param {String} inum Attribute ID.
     * @param {module:api/AttributeApi~deleteAttributesByInumCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAttributesByInum(inum, callback) {
      let postBody = null;
      // verify the required parameter 'inum' is set
      if (inum === undefined || inum === null) {
        throw new Error("Missing the required parameter 'inum' when calling deleteAttributesByInum");
      }

      let pathParams = {
        'inum': inum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/attributes/{inum}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttributes operation.
     * @callback module:api/AttributeApi~getAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GluuAttribute>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of Gluu attributes.
     * Gets all attributes. Optionally max-size of the result, attribute status and pattern can be provided.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Search size - max size of the results to return. (default to 50)
     * @param {String} opts.pattern Search pattern.
     * @param {String} opts.status Status of the attribute (default to 'all')
     * @param {module:api/AttributeApi~getAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GluuAttribute>}
     */
    getAttributes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'pattern': opts['pattern'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GluuAttribute];
      return this.apiClient.callApi(
        '/api/v1/attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttributesByInum operation.
     * @callback module:api/AttributeApi~getAttributesByInumCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GluuAttribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an attribute based on inum.
     * Gets an attribute based on inum.
     * @param {String} inum Attribute ID.
     * @param {module:api/AttributeApi~getAttributesByInumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GluuAttribute}
     */
    getAttributesByInum(inum, callback) {
      let postBody = null;
      // verify the required parameter 'inum' is set
      if (inum === undefined || inum === null) {
        throw new Error("Missing the required parameter 'inum' when calling getAttributesByInum");
      }

      let pathParams = {
        'inum': inum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GluuAttribute;
      return this.apiClient.callApi(
        '/api/v1/attributes/{inum}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchAttributesByInum operation.
     * @callback module:api/AttributeApi~patchAttributesByInumCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GluuAttribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially modify a GluuAttribute.
     * Partially modify a GluuAttribute.
     * @param {String} inum Attribute ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchRequest} opts.patchRequest 
     * @param {module:api/AttributeApi~patchAttributesByInumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GluuAttribute}
     */
    patchAttributesByInum(inum, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchRequest'];
      // verify the required parameter 'inum' is set
      if (inum === undefined || inum === null) {
        throw new Error("Missing the required parameter 'inum' when calling patchAttributesByInum");
      }

      let pathParams = {
        'inum': inum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GluuAttribute;
      return this.apiClient.callApi(
        '/api/v1/attributes/{inum}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAttributes operation.
     * @callback module:api/AttributeApi~postAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GluuAttribute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new attribute.
     * Adds a new attribute.
     * @param {String} name Name of the attribute.
     * @param {Array.<String>} displayName 
     * @param {module:model/String} dataType Data Type of attribute.
     * @param {String} status Distinguished Name
     * @param {Object} opts Optional parameters
     * @param {String} opts.description User friendly descriptive detail of attribute.
     * @param {Boolean} opts.oxMultiValuedAttribute Boolean value indicating if the attribute is multi-value
     * @param {String} opts.lifetime 
     * @param {String} opts.sourceAttribute 
     * @param {String} opts.salt 
     * @param {String} opts.nameIdType 
     * @param {String} opts.origin 
     * @param {Array.<String>} opts.editType GluuUserRole
     * @param {Array.<String>} opts.viewType GluuUserRole
     * @param {Array.<String>} opts.usageType GluuAttributeUsageType
     * @param {String} opts.oxAuthClaimName 
     * @param {String} opts.seeAlso 
     * @param {String} opts.saml1Uri 
     * @param {String} opts.saml2Uri 
     * @param {String} opts.urn 
     * @param {Boolean} opts.oxSCIMCustomAttribute Boolean value indicating if the attribute is a SCIM custom attribute
     * @param {Boolean} opts.custom Boolean value indicating if the attribute is a custom attribute
     * @param {Boolean} opts.requred Boolean value indicating is a mandatory attribute
     * @param {module:model/GluuAttributeAttributeValidation} opts.attributeValidation 
     * @param {String} opts.gluuTooltip 
     * @param {module:api/AttributeApi~postAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GluuAttribute}
     */
    postAttributes(name, displayName, dataType, status, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postAttributes");
      }
      // verify the required parameter 'displayName' is set
      if (displayName === undefined || displayName === null) {
        throw new Error("Missing the required parameter 'displayName' when calling postAttributes");
      }
      // verify the required parameter 'dataType' is set
      if (dataType === undefined || dataType === null) {
        throw new Error("Missing the required parameter 'dataType' when calling postAttributes");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling postAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': name,
        'displayName': this.apiClient.buildCollectionParam(displayName, 'csv'),
        'description': opts['description'],
        'dataType': dataType,
        'status': status,
        'oxMultiValuedAttribute': opts['oxMultiValuedAttribute'],
        'lifetime': opts['lifetime'],
        'sourceAttribute': opts['sourceAttribute'],
        'salt': opts['salt'],
        'nameIdType': opts['nameIdType'],
        'origin': opts['origin'],
        'editType': this.apiClient.buildCollectionParam(opts['editType'], 'csv'),
        'viewType': this.apiClient.buildCollectionParam(opts['viewType'], 'csv'),
        'usageType': this.apiClient.buildCollectionParam(opts['usageType'], 'csv'),
        'oxAuthClaimName': opts['oxAuthClaimName'],
        'seeAlso': opts['seeAlso'],
        'saml1Uri': opts['saml1Uri'],
        'saml2Uri': opts['saml2Uri'],
        'urn': opts['urn'],
        'oxSCIMCustomAttribute': opts['oxSCIMCustomAttribute'],
        'custom': opts['custom'],
        'requred': opts['requred'],
        'attributeValidation': opts['attributeValidation'],
        'gluuTooltip': opts['gluuTooltip']
      };

      let authNames = ['jans-auth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = GluuAttribute;
      return this.apiClient.callApi(
        '/api/v1/attributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAttributes operation.
     * @callback module:api/AttributeApi~putAttributesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GluuAttribute>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing attribute.
     * Updates an existing attribute.
     * @param {module:model/GluuAttribute} gluuAttribute 
     * @param {module:api/AttributeApi~putAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GluuAttribute>}
     */
    putAttributes(gluuAttribute, callback) {
      let postBody = gluuAttribute;
      // verify the required parameter 'gluuAttribute' is set
      if (gluuAttribute === undefined || gluuAttribute === null) {
        throw new Error("Missing the required parameter 'gluuAttribute' when calling putAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [GluuAttribute];
      return this.apiClient.callApi(
        '/api/v1/attributes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
