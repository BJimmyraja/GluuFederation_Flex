/**
 * jans-config-api
 * jans-config-api - Authorization services
 *
 * The version of the OpenAPI document: 1.0
 * Contact: xxx@gluu.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import InlineObject from '../model/InlineObject';
import InlineResponse2001MemcachedConfiguration from '../model/InlineResponse2001MemcachedConfiguration';

/**
* CacheConfigurationMemcached service.
* @module api/CacheConfigurationMemcachedApi
* @version 1.0
*/
export default class CacheConfigurationMemcachedApi {

    /**
    * Constructs a new CacheConfigurationMemcachedApi. 
    * @alias module:api/CacheConfigurationMemcachedApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getConfigCacheMemcached operation.
     * @callback module:api/CacheConfigurationMemcachedApi~getConfigCacheMemcachedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001MemcachedConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns Memcached cache configuration.
     * Returns Memcached cache configuration.
     * @param {module:api/CacheConfigurationMemcachedApi~getConfigCacheMemcachedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001MemcachedConfiguration}
     */
    getConfigCacheMemcached(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001MemcachedConfiguration;
      return this.apiClient.callApi(
        '/api/v1/config/cache/memcached', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putConfigCacheMemcached operation.
     * @callback module:api/CacheConfigurationMemcachedApi~putConfigCacheMemcachedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001MemcachedConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates Memcached cache configuration.
     * Updates Memcached cache configuration.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject} opts.inlineObject 
     * @param {module:api/CacheConfigurationMemcachedApi~putConfigCacheMemcachedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001MemcachedConfiguration}
     */
    putConfigCacheMemcached(opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001MemcachedConfiguration;
      return this.apiClient.callApi(
        '/api/v1/config/cache/memcached', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
