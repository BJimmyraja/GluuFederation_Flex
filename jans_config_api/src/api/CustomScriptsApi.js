/**
 * jans-config-api
 * jans-config-api - Authorization services
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xxx@gluu.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomScript from '../model/CustomScript';
import ErrorResponse from '../model/ErrorResponse';

/**
* CustomScripts service.
* @module api/CustomScriptsApi
* @version 1.0.0
*/
export default class CustomScriptsApi {

    /**
    * Constructs a new CustomScriptsApi. 
    * @alias module:api/CustomScriptsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteConfigScriptsByInum operation.
     * @callback module:api/CustomScriptsApi~deleteConfigScriptsByInumCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a custom script.
     * Deletes a custom script.
     * @param {String} inum Script identifier.
     * @param {module:api/CustomScriptsApi~deleteConfigScriptsByInumCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteConfigScriptsByInum(inum, callback) {
      let postBody = null;
      // verify the required parameter 'inum' is set
      if (inum === undefined || inum === null) {
        throw new Error("Missing the required parameter 'inum' when calling deleteConfigScriptsByInum");
      }

      let pathParams = {
        'inum': inum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/jans-config-api/api/v1/config/scripts/{inum}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigScripts operation.
     * @callback module:api/CustomScriptsApi~getConfigScriptsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomScript>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of custom scripts.
     * Gets a list of custom scripts.
     * @param {module:api/CustomScriptsApi~getConfigScriptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomScript>}
     */
    getConfigScripts(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CustomScript];
      return this.apiClient.callApi(
        '/jans-config-api/api/v1/config/scripts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigScriptsByInum operation.
     * @callback module:api/CustomScriptsApi~getConfigScriptsByInumCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomScript} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a script by Inum.
     * Gets a script by Inum.
     * @param {String} inum Script identifier.
     * @param {module:api/CustomScriptsApi~getConfigScriptsByInumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomScript}
     */
    getConfigScriptsByInum(inum, callback) {
      let postBody = null;
      // verify the required parameter 'inum' is set
      if (inum === undefined || inum === null) {
        throw new Error("Missing the required parameter 'inum' when calling getConfigScriptsByInum");
      }

      let pathParams = {
        'inum': inum
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomScript;
      return this.apiClient.callApi(
        '/jans-config-api/api/v1/config/scripts/inum/{inum}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigScriptsByType operation.
     * @callback module:api/CustomScriptsApi~getConfigScriptsByTypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomScript>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets list of scripts by type.
     * Gets list of scripts by type.
     * @param {module:model/String} type Script type.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pattern Search pattern.
     * @param {Number} opts.limit Search size - max size of the results to return. (default to 50)
     * @param {module:api/CustomScriptsApi~getConfigScriptsByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomScript>}
     */
    getConfigScriptsByType(type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getConfigScriptsByType");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
        'pattern': opts['pattern'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CustomScript];
      return this.apiClient.callApi(
        '/jans-config-api/api/v1/config/scripts/type/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postConfigScripts operation.
     * @callback module:api/CustomScriptsApi~postConfigScriptsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomScript} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new custom script.
     * Adds a new custom script.
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomScript} opts.customScript 
     * @param {module:api/CustomScriptsApi~postConfigScriptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomScript}
     */
    postConfigScripts(opts, callback) {
      opts = opts || {};
      let postBody = opts['customScript'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomScript;
      return this.apiClient.callApi(
        '/jans-config-api/api/v1/config/scripts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putConfigScripts operation.
     * @callback module:api/CustomScriptsApi~putConfigScriptsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomScript} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a custom script.
     * Updates a custom script.
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomScript} opts.customScript 
     * @param {module:api/CustomScriptsApi~putConfigScriptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomScript}
     */
    putConfigScripts(opts, callback) {
      opts = opts || {};
      let postBody = opts['customScript'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomScript;
      return this.apiClient.callApi(
        '/jans-config-api/api/v1/config/scripts', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
