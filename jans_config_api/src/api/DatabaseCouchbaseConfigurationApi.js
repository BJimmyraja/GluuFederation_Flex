/**
 * jans-config-api
 * jans-config-api - Authorization services
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xxx@gluu.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CouchbaseConfiguration from '../model/CouchbaseConfiguration';
import ErrorResponse from '../model/ErrorResponse';
import PatchRequest from '../model/PatchRequest';

/**
* DatabaseCouchbaseConfiguration service.
* @module api/DatabaseCouchbaseConfigurationApi
* @version 1.0.0
*/
export default class DatabaseCouchbaseConfigurationApi {

    /**
    * Constructs a new DatabaseCouchbaseConfigurationApi. 
    * @alias module:api/DatabaseCouchbaseConfigurationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteConfigDatabaseCouchbaseByName operation.
     * @callback module:api/DatabaseCouchbaseConfigurationApi~deleteConfigDatabaseCouchbaseByNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Couchbase configurations by name.
     * Deletes a Couchbase configurations by name.
     * @param {String} name Name of Couchbase configuration.
     * @param {module:api/DatabaseCouchbaseConfigurationApi~deleteConfigDatabaseCouchbaseByNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteConfigDatabaseCouchbaseByName(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteConfigDatabaseCouchbaseByName");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jans-config-api/api/v1/config/database/couchbase/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigDatabaseCouchbase operation.
     * @callback module:api/DatabaseCouchbaseConfigurationApi~getConfigDatabaseCouchbaseCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CouchbaseConfiguration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets list of existing Couchbase configurations.
     * Gets list of existing Couchbase configurations.
     * @param {module:api/DatabaseCouchbaseConfigurationApi~getConfigDatabaseCouchbaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CouchbaseConfiguration>}
     */
    getConfigDatabaseCouchbase(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CouchbaseConfiguration];
      return this.apiClient.callApi(
        '/jans-config-api/api/v1/config/database/couchbase', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfigDatabaseCouchbaseByName operation.
     * @callback module:api/DatabaseCouchbaseConfigurationApi~getConfigDatabaseCouchbaseByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CouchbaseConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Couchbase configurations by name.
     * Gets a Couchbase configurations by name.
     * @param {String} name Name of Couchbase configuration.
     * @param {module:api/DatabaseCouchbaseConfigurationApi~getConfigDatabaseCouchbaseByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CouchbaseConfiguration}
     */
    getConfigDatabaseCouchbaseByName(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getConfigDatabaseCouchbaseByName");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CouchbaseConfiguration;
      return this.apiClient.callApi(
        '/jans-config-api/api/v1/config/database/couchbase/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchConfigDatabaseCouchbaseByName operation.
     * @callback module:api/DatabaseCouchbaseConfigurationApi~patchConfigDatabaseCouchbaseByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CouchbaseConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially modify an Couchbase configuration.
     * Partially modify an Couchbase configuration.
     * @param {String} name Name of Couchbase configuration.
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchRequest} opts.patchRequest 
     * @param {module:api/DatabaseCouchbaseConfigurationApi~patchConfigDatabaseCouchbaseByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CouchbaseConfiguration}
     */
    patchConfigDatabaseCouchbaseByName(name, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchRequest'];
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling patchConfigDatabaseCouchbaseByName");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CouchbaseConfiguration;
      return this.apiClient.callApi(
        '/jans-config-api/api/v1/config/database/couchbase/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postConfigDatabaseCouchbase operation.
     * @callback module:api/DatabaseCouchbaseConfigurationApi~postConfigDatabaseCouchbaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CouchbaseConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new Couchbase configuration.
     * Adds a new Couchbase configuration.
     * @param {module:model/CouchbaseConfiguration} couchbaseConfiguration 
     * @param {module:api/DatabaseCouchbaseConfigurationApi~postConfigDatabaseCouchbaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CouchbaseConfiguration}
     */
    postConfigDatabaseCouchbase(couchbaseConfiguration, callback) {
      let postBody = couchbaseConfiguration;
      // verify the required parameter 'couchbaseConfiguration' is set
      if (couchbaseConfiguration === undefined || couchbaseConfiguration === null) {
        throw new Error("Missing the required parameter 'couchbaseConfiguration' when calling postConfigDatabaseCouchbase");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CouchbaseConfiguration;
      return this.apiClient.callApi(
        '/jans-config-api/api/v1/config/database/couchbase', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postConfigDatabaseCouchbaseTest operation.
     * @callback module:api/DatabaseCouchbaseConfigurationApi~postConfigDatabaseCouchbaseTestCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tests a Couchbase configurations by name.
     * Tests a Couchbase configurations by name.
     * @param {module:model/CouchbaseConfiguration} couchbaseConfiguration 
     * @param {module:api/DatabaseCouchbaseConfigurationApi~postConfigDatabaseCouchbaseTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    postConfigDatabaseCouchbaseTest(couchbaseConfiguration, callback) {
      let postBody = couchbaseConfiguration;
      // verify the required parameter 'couchbaseConfiguration' is set
      if (couchbaseConfiguration === undefined || couchbaseConfiguration === null) {
        throw new Error("Missing the required parameter 'couchbaseConfiguration' when calling postConfigDatabaseCouchbaseTest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/jans-config-api/api/v1/config/database/couchbase/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putConfigDatabaseCouchbase operation.
     * @callback module:api/DatabaseCouchbaseConfigurationApi~putConfigDatabaseCouchbaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CouchbaseConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates Couchbase configuration.
     * Updates Couchbase configuration.
     * @param {module:model/CouchbaseConfiguration} couchbaseConfiguration 
     * @param {module:api/DatabaseCouchbaseConfigurationApi~putConfigDatabaseCouchbaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CouchbaseConfiguration}
     */
    putConfigDatabaseCouchbase(couchbaseConfiguration, callback) {
      let postBody = couchbaseConfiguration;
      // verify the required parameter 'couchbaseConfiguration' is set
      if (couchbaseConfiguration === undefined || couchbaseConfiguration === null) {
        throw new Error("Missing the required parameter 'couchbaseConfiguration' when calling putConfigDatabaseCouchbase");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jans-auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CouchbaseConfiguration;
      return this.apiClient.callApi(
        '/jans-config-api/api/v1/config/database/couchbase', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
