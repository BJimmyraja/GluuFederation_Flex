/**
 * jans-config-api
 * jans-config-api - Authorization services
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xxx@gluu.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ScopeAttributes from './ScopeAttributes';

/**
 * The Scope model module.
 * @module model/Scope
 * @version 1.0.0
 */
class Scope {
    /**
     * Constructs a new <code>Scope</code>.
     * Auth Scope.
     * @alias module:model/Scope
     */
    constructor() { 
        
        Scope.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Scope</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Scope} obj Optional instance to populate.
     * @return {module:model/Scope} The populated <code>Scope</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Scope();

            if (data.hasOwnProperty('dn')) {
                obj['dn'] = ApiClient.convertToType(data['dn'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('inum')) {
                obj['inum'] = ApiClient.convertToType(data['inum'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('iconUrl')) {
                obj['iconUrl'] = ApiClient.convertToType(data['iconUrl'], 'String');
            }
            if (data.hasOwnProperty('authorizationPolicies')) {
                obj['authorizationPolicies'] = ApiClient.convertToType(data['authorizationPolicies'], ['String']);
            }
            if (data.hasOwnProperty('defaultScope')) {
                obj['defaultScope'] = ApiClient.convertToType(data['defaultScope'], 'Boolean');
            }
            if (data.hasOwnProperty('scopeType')) {
                obj['scopeType'] = ApiClient.convertToType(data['scopeType'], 'String');
            }
            if (data.hasOwnProperty('jansClaim')) {
                obj['jansClaim'] = ApiClient.convertToType(data['jansClaim'], ['String']);
            }
            if (data.hasOwnProperty('umaType')) {
                obj['umaType'] = ApiClient.convertToType(data['umaType'], 'Boolean');
            }
            if (data.hasOwnProperty('umaAuthorizationPolicies')) {
                obj['umaAuthorizationPolicies'] = ApiClient.convertToType(data['umaAuthorizationPolicies'], ['String']);
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ScopeAttributes.constructFromObject(data['attributes']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} dn
 */
Scope.prototype['dn'] = undefined;

/**
 * The base64url encoded id.
 * @member {String} id
 */
Scope.prototype['id'] = undefined;

/**
 * Unique id identifying the .
 * @member {String} inum
 */
Scope.prototype['inum'] = undefined;

/**
 * A human-readable name of the scope.
 * @member {String} displayName
 */
Scope.prototype['displayName'] = undefined;

/**
 * A human-readable string describing the scope.
 * @member {String} description
 */
Scope.prototype['description'] = undefined;

/**
 * A URL for a graphic icon representing the scope. The referenced icon MAY be used by the authorization server in any user interface it presents to the resource owner.
 * @member {String} iconUrl
 */
Scope.prototype['iconUrl'] = undefined;

/**
 * Policies associated with all scopes.
 * @member {Array.<String>} authorizationPolicies
 */
Scope.prototype['authorizationPolicies'] = undefined;

/**
 * Boolean value to specify default scope.
 * @member {Boolean} defaultScope
 */
Scope.prototype['defaultScope'] = undefined;

/**
 * The scopes type associated with Access Tokens determine what resources will.
 * @member {module:model/Scope.ScopeTypeEnum} scopeType
 */
Scope.prototype['scopeType'] = undefined;

/**
 * Claim attributes associated with the scope.
 * @member {Array.<String>} jansClaim
 */
Scope.prototype['jansClaim'] = undefined;

/**
 * @member {Boolean} umaType
 */
Scope.prototype['umaType'] = undefined;

/**
 * @member {Array.<String>} umaAuthorizationPolicies
 */
Scope.prototype['umaAuthorizationPolicies'] = undefined;

/**
 * @member {module:model/ScopeAttributes} attributes
 */
Scope.prototype['attributes'] = undefined;





/**
 * Allowed values for the <code>scopeType</code> property.
 * @enum {String}
 * @readonly
 */
Scope['ScopeTypeEnum'] = {

    /**
     * value: "OpenID"
     * @const
     */
    "OpenID": "OpenID",

    /**
     * value: "Dynamic"
     * @const
     */
    "Dynamic": "Dynamic",

    /**
     * value: "OAuth"
     * @const
     */
    "OAuth": "OAuth"
};



export default Scope;

