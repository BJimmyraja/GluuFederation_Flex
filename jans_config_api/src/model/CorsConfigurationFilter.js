/**
 * jans-config-api
 * jans-config-api - Authorization services
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xxx@gluu.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CorsConfigurationFilter model module.
 * @module model/CorsConfigurationFilter
 * @version 1.0.0
 */
class CorsConfigurationFilter {
    /**
     * Constructs a new <code>CorsConfigurationFilter</code>.
     * CORS Configuration Filter.
     * @alias module:model/CorsConfigurationFilter
     */
    constructor() { 
        
        CorsConfigurationFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CorsConfigurationFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CorsConfigurationFilter} obj Optional instance to populate.
     * @return {module:model/CorsConfigurationFilter} The populated <code>CorsConfigurationFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CorsConfigurationFilter();

            if (data.hasOwnProperty('filterName')) {
                obj['filterName'] = ApiClient.convertToType(data['filterName'], 'String');
            }
            if (data.hasOwnProperty('corsEnabled')) {
                obj['corsEnabled'] = ApiClient.convertToType(data['corsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('corsAllowedOrigins')) {
                obj['corsAllowedOrigins'] = ApiClient.convertToType(data['corsAllowedOrigins'], 'String');
            }
            if (data.hasOwnProperty('corsAllowedMethods')) {
                obj['corsAllowedMethods'] = ApiClient.convertToType(data['corsAllowedMethods'], 'String');
            }
            if (data.hasOwnProperty('corsAllowedHeaders')) {
                obj['corsAllowedHeaders'] = ApiClient.convertToType(data['corsAllowedHeaders'], 'String');
            }
            if (data.hasOwnProperty('corsExposedHeaders')) {
                obj['corsExposedHeaders'] = ApiClient.convertToType(data['corsExposedHeaders'], 'String');
            }
            if (data.hasOwnProperty('corsSupportCredentials')) {
                obj['corsSupportCredentials'] = ApiClient.convertToType(data['corsSupportCredentials'], 'Boolean');
            }
            if (data.hasOwnProperty('corsLoggingEnabled')) {
                obj['corsLoggingEnabled'] = ApiClient.convertToType(data['corsLoggingEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('corsPreflightMaxAge')) {
                obj['corsPreflightMaxAge'] = ApiClient.convertToType(data['corsPreflightMaxAge'], 'Number');
            }
            if (data.hasOwnProperty('corsRequestDecorate')) {
                obj['corsRequestDecorate'] = ApiClient.convertToType(data['corsRequestDecorate'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * Filter name.
 * @member {String} filterName
 */
CorsConfigurationFilter.prototype['filterName'] = undefined;

/**
 * Boolean value indicating if the filter is enabled.
 * @member {Boolean} corsEnabled
 */
CorsConfigurationFilter.prototype['corsEnabled'] = undefined;

/**
 * A list of origins that are allowed to access the resource. A * can be specified to enable access to resource from any origin. Otherwise, a whitelist of comma separated origins can be provided.
 * @member {String} corsAllowedOrigins
 */
CorsConfigurationFilter.prototype['corsAllowedOrigins'] = undefined;

/**
 * A comma separated list of HTTP methods that can be used to access the resource, using cross-origin requests. These are the methods which will also be included as part of Access-Control-Allow-Methods header in pre-flight response.
 * @member {String} corsAllowedMethods
 */
CorsConfigurationFilter.prototype['corsAllowedMethods'] = undefined;

/**
 * The names of the supported author request headers.
 * @member {String} corsAllowedHeaders
 */
CorsConfigurationFilter.prototype['corsAllowedHeaders'] = undefined;

/**
 * A comma separated list of request headers that can be used when making an actual request. These headers will also be returned as part of Access-Control-Allow-Headers header in a pre-flight response.
 * @member {String} corsExposedHeaders
 */
CorsConfigurationFilter.prototype['corsExposedHeaders'] = undefined;

/**
 * A flag that indicates whether the resource supports user credentials. This flag is exposed as part of Access-Control-Allow-Credentials header in a pre-flight response. It helps browser determine whether or not an actual request can be made using credentials.
 * @member {Boolean} corsSupportCredentials
 */
CorsConfigurationFilter.prototype['corsSupportCredentials'] = undefined;

/**
 * Value to enable logging, Setting the value to False will disable logging.
 * @member {Boolean} corsLoggingEnabled
 */
CorsConfigurationFilter.prototype['corsLoggingEnabled'] = undefined;

/**
 * The duration in seconds the browser is allowed to cache the result of the pre-flight request.
 * @member {Number} corsPreflightMaxAge
 */
CorsConfigurationFilter.prototype['corsPreflightMaxAge'] = undefined;

/**
 * A flag to control if CORS specific attributes should be added to the HttpServletRequest object.
 * @member {Boolean} corsRequestDecorate
 */
CorsConfigurationFilter.prototype['corsRequestDecorate'] = undefined;






export default CorsConfigurationFilter;

